{"mappings":"AAIA,MAAMA,MAAQC,GACH,IAAIC,SAASC,IAChBC,YAAW,KACTD,EAAQF,EAAA,GACTA,EAAA,IAIHI,QAAUC,GAAQC,QAAQC,IAAI,kBAAkBF,OAahDG,MAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,gBAAkB,CAACC,EAAUC,IAC1BZ,QAAQC,QAAQU,EAASE,KAAIC,GAClCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,KAI3DC,OAASC,GAAgBX,QAAQY,MAAMD,GAYvCE,0BAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,gBAAmBC,IACvB,MAAM3B,GAL2BqB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQtC,OAAO,IAAIpB,SAAQ,CAACC,EAASyB,KAC3BxB,YAAW,KACUmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAEpC4B,EAAOD,EAAYE,GAAE,GAEtB7B,EAAA,GACL,EAGI8B,WAAa,EAAGD,KAAIvB,WACxBC,QAAQC,IAAI,eAAeqB,kBAAmBvB,MAAQ,EAGlDyB,SAAWF,IACftB,QAAQyB,KAAK,gCAAgCH,6BAA6B,EAI5EH,gBAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BC,KAAKJ,YACLK,MAAMJ,UAETL,gBAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BC,KAAKJ,YACLK,MAAMJ,UAETL,gBAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BC,KAAKJ,YACLK,MAAMJ,UAETL,gBAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BC,KAAKJ,YACLK,MAAMJ","sources":["src/js/02-promisification.js"],"sourcesContent":["/*Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" \nчерез ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд \nкоторое передали во время вызова функции delay. */\n\nconst delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(ms)\n      }, ms)\n  })\n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\n// delay(2000).then(logger1); // Resolved after 2000ms\n// delay(1000).then(logger1); // Resolved after 1000ms\n// delay(1500).then(logger1); // Resolved after 1500ms\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/*Задание 2\nПерепиши функцию toggleUserState() так, чтобы она не использовала \ncallback-функцию callback, а принимала всего два параметра allUsers \nи userName и возвращала промис. */\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n//якщо імя співпадає повертаємо новий обєкт \nconst toggleUserState = (allUsers, userName) => {\n  return Promise.resolve(allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  ));\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n// Вызовы функции для проверки\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/*Задание 3\nПерепиши функцию makeTransaction() так, чтобы она не использовала \ncallback-функции onSuccess и onError, а принимала всего один \nпараметр transaction и возвращала промис. */\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  // console.log(delay)\n \n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay});\n      } else {\n        reject(transaction.id)\n      }\n    }, delay) \n  })\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Вызовы функции для проверки\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","users","name","active","toggleUserState","allUsers","userName","map","user","logger","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","then","catch"],"version":3,"file":"02-promisification.2fbd58c0.js.map"}