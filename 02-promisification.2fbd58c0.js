const delay=e=>new Promise((o=>{setTimeout((()=>{o(e)}),e)})),logger1=e=>console.log(`Resolved after ${e}ms`),users=[{name:"Mango",active:!0},{name:"Poly",active:!1},{name:"Ajax",active:!0},{name:"Lux",active:!1}],toggleUserState=(e,o)=>Promise.resolve(e.map((e=>e.name===o?{...e,active:!e.active}:e))),logger=e=>console.table(e),randomIntegerFromInterval=(e,o)=>Math.floor(Math.random()*(o-e+1)+e),makeTransaction=e=>{const o=(a=200,r=500,Math.floor(Math.random()*(r-a+1)+a));var a,r;return new Promise(((a,r)=>{setTimeout((()=>{Math.random()>.3?a({id:e.id,time:o}):r(e.id)}),o)}))},logSuccess=({id:e,time:o})=>{console.log(`Transaction ${e} processed in ${o}ms`)},logError=e=>{console.warn(`Error processing transaction ${e}. Please try again later.`)};makeTransaction({id:70,amount:150}).then(logSuccess).catch(logError),makeTransaction({id:71,amount:230}).then(logSuccess).catch(logError),makeTransaction({id:72,amount:75}).then(logSuccess).catch(logError),makeTransaction({id:73,amount:100}).then(logSuccess).catch(logError);
//# sourceMappingURL=02-promisification.2fbd58c0.js.map
